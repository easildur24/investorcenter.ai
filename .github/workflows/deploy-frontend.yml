name: Deploy Frontend to EKS

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'components/**'
      - 'lib/**'
      - 'public/**'
      - 'middleware.ts'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.js'
      - 'tsconfig.json'
      - 'tailwind.config.ts'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: 360358043271.dkr.ecr.us-east-1.amazonaws.com/investorcenter/app
  EKS_CLUSTER_NAME: investorcenter-eks
  DEPLOYMENT_NAME: investorcenter-app
  NAMESPACE: investorcenter

jobs:
  build-and-push:
    name: Build and Push Frontend to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

      - name: Build Docker image
        run: |
          docker build -t ${{ env.ECR_REPOSITORY }}:${{ github.sha }} -f Dockerfile .
          docker tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} ${{ env.ECR_REPOSITORY }}:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push ${{ env.ECR_REPOSITORY }}:latest

      - name: Image digest
        run: echo "Frontend image pushed - ${{ env.ECR_REPOSITORY }}:${{ github.sha }}"

  deploy-to-eks:
    name: Deploy Frontend to EKS
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Verify kubectl access
        run: |
          kubectl get nodes
          kubectl get deployments -n ${{ env.NAMESPACE }}

      - name: Update deployment with new image
        run: |
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            investorcenter-app=${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            -n ${{ env.NAMESPACE }}

      - name: Wait for rollout to complete
        run: |
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} --timeout=5m

      - name: Show deployment status
        run: |
          echo "=== Deployment Status ==="
          kubectl get deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }}
          echo ""
          echo "=== Pods ==="
          kubectl get pods -n ${{ env.NAMESPACE }} -l app=investorcenter-app
          echo ""
          echo "=== Recent Events ==="
          kubectl get events -n ${{ env.NAMESPACE }} --sort-by='.lastTimestamp' | head -10

      - name: Verify deployment health
        run: |
          # Get the service endpoint
          kubectl get svc -n ${{ env.NAMESPACE }}

          # Check if pods are ready
          READY_PODS=$(kubectl get deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.status.readyReplicas}')
          DESIRED_PODS=$(kubectl get deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.replicas}')

          echo "Ready pods: $READY_PODS / $DESIRED_PODS"

          if [ "$READY_PODS" != "$DESIRED_PODS" ]; then
            echo "⚠️ Not all pods are ready!"
            exit 1
          fi

          echo "✅ Frontend deployment successful! All pods are ready."
